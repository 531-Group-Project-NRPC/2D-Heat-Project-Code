import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Physical dimensions
L = 0.06   # width in meters
H = 0.008  # height in meters

# Grid resolution
nx, ny = 100, 100
x = np.linspace(0, L, nx)
y = np.linspace(0, H, ny)
X, Y = np.meshgrid(x, y)

# Compute steady-state solution using first 5 odd Fourier terms
u = np.zeros_like(X)
for n in [1, 3, 5, 7, 9]:
    Bn = 260 / (n * np.pi)
    term = (Bn *
            np.sinh(n * np.pi * Y / L) / np.sinh(n * np.pi * H / L) *
            np.sin(n * np.pi * X / L))
    u += term
u += 25  # Add background temperature

# Compute gradients (heat flow = negative temperature gradient)
Uy, Ux = np.gradient(-u, y, x)

# Subsample for arrow clarity
skip = (slice(None, None, 10), slice(None, None, 10))
Xq, Yq, Uq, Vq = X[skip], Y[skip], Ux[skip], Uy[skip]
Zq = u[skip]


mag = np.sqrt(Uq**2 + Vq**2)
Uqn = Uq / (mag + 1e-10)
Vqn = Vq / (mag + 1e-10)


fig = plt.figure(figsize=(10, 5))
ax = fig.add_subplot(111, projection='3d')


surf = ax.plot_surface(X * 100, Y * 100, u, cmap='hot', edgecolor='none', alpha=0.95)


ax.quiver(Xq * 100, Yq * 100, Zq, Uqn, Vqn, np.zeros_like(Uqn),
          length=0.7, normalize=False, color='black', arrow_length_ratio=0.4, linewidth=1)


ax.set_title('3D Heat Distribution with Directional Heat Flow Vectors')
ax.set_xlabel('Width (cm)')
ax.set_ylabel('Height (cm)')
ax.set_zlabel('Temperature (°C)')
ax.view_init(elev=30, azim=-60)


cbar = fig.colorbar(surf, ax=ax, shrink=0.5, aspect=10)
cbar.set_label('Temperature (°C)')

plt.tight_layout()
plt.show()
